(window.webpackJsonp=window.webpackJsonp||[]).push([[20],{732:function(t,e,a){"use strict";a.r(e);var n=a(4),s=Object(n.a)({},(function(){var t=this,e=t.$createElement,a=t._self._c||e;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"前言"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#前言"}},[t._v("#")]),t._v(" 前言")]),t._v(" "),a("p",[t._v("在我们手撸ajax之前，我们先来Ajax吧！")]),t._v(" "),a("h3",{attrs:{id:"ajax是什么"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#ajax是什么"}},[t._v("#")]),t._v(" Ajax是什么")]),t._v(" "),a("p",[t._v("在我们写前端代码时，"),a("code",[t._v("我们是不是都苦恼着如何做前后端互通呢？")]),t._v("而今天的主角就是帮我们完成这件事的。所以Ajax的作用就是用于浏览器与服务器之间使用异步数据传输(HTTP 请求),做到局部请求以实现局部刷新。让我们可以请求到服务端的数据用于渲染浏览器端。")]),t._v(" "),a("h3",{attrs:{id:"ajax的作用"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#ajax的作用"}},[t._v("#")]),t._v(" Ajax的作用")]),t._v(" "),a("ol",[a("li",[t._v("不刷新页面而更新网页（"),a("code",[t._v("局部刷新")]),t._v("）")]),t._v(" "),a("li",[t._v("在页面加载后从服务器"),a("code",[t._v("请求")]),t._v("数据")]),t._v(" "),a("li",[t._v("在页面加载后从服务器"),a("code",[t._v("接受")]),t._v("数据")]),t._v(" "),a("li",[t._v("在后端向服务器发送数据")])]),t._v(" "),a("h2",{attrs:{id:"原生js向后端请求方式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#原生js向后端请求方式"}},[t._v("#")]),t._v(" 原生JS向后端请求方式")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("//原生js提供的接口请求方法\nlet xhr = new XMLHttpRequest()\nxhr.open(method, url, async, [user-name], [user-pass])\nxhr.onreadystatechange  = function() {     //监听\n    if(xhr.readyState === 4 && xhr.status === 200) {\n        console.log(xhr.responseText);\n    }\n}\nxhr.send([请求主题])\n")])])]),a("p",[t._v("原生JS提供了一个 "),a("strong",[t._v("XMLHttpRequest")]),t._v(" 方法。我们直接new 一个xhr实例对象。然后我们直接调用"),a("strong",[t._v("XMLHttpRequest")]),t._v("上的open方法。同时在"),a("code",[t._v("open")]),t._v("方法中携带method、url、async（async=false为同步执行）、[user-name]、[user-pass]（可选、url的认证资格)。")]),t._v(" "),a("h4",{attrs:{id:"http-请求方式-method"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#http-请求方式-method"}},[t._v("#")]),t._v(" http 请求方式（method）")]),t._v(" "),a("ul",[a("li",[t._v("GET: 从服务器获取数据（向服务器推送数据）")]),t._v(" "),a("li",[t._v("POST: 向服务器推送数据（从服务器获取数据）")]),t._v(" "),a("li",[t._v("DELETE：删除服务器的某些内容")]),t._v(" "),a("li",[t._v("PUT： 向服务器存放一些内容")]),t._v(" "),a("li",[t._v("HEAD:  只想获取服务器返回的响应头信息，不要响应体")]),t._v(" "),a("li",[t._v("OPTIONS: 一般使用它向服务器发送一个探测请求，如果返回的信息，说明客户端和服务器建立了连接，可以继续请求")]),t._v(" "),a("li",[t._v("TRACE:  基于cross - domain 进行跨域请求的时候")])]),t._v(" "),a("p",[t._v("之后我们继续可以调用"),a("strong",[t._v("XMLHttpRequest")]),t._v(" 的"),a("code",[t._v("onreadystatechange")]),t._v("方法用来监听的状态。根据状态码来判断请求是否成功和返回数据。")]),t._v(" "),a("h3",{attrs:{id:"readystate的状态"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#readystate的状态"}},[t._v("#")]),t._v(" readyState的状态")]),t._v(" "),a("ul",[a("li",[t._v("0: 刚刚创建xhr")]),t._v(" "),a("li",[t._v("1：执行了open这个操作")]),t._v(" "),a("li",[t._v("2：请求已经发送，响应头已经被客户端接受")]),t._v(" "),a("li",[t._v("3: 响应主题正在返回     // 还没被接收")]),t._v(" "),a("li",[t._v("4：响应主体已经被客户端接收")])]),t._v(" "),a("h3",{attrs:{id:"http状态码"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#http状态码"}},[t._v("#")]),t._v(" http状态码")]),t._v(" "),a("ul",[a("li",[t._v("1xx: 请求已经接受，正在处理")]),t._v(" "),a("li",[t._v("2xx：成功。请求被成功接受")]),t._v(" "),a("li",[t._v("3xx：成功，资源已经重定向了  // 换了个url")]),t._v(" "),a("li",[t._v("4xx：客户端错误")]),t._v(" "),a("li",[t._v("5xx: 服务端错误")])]),t._v(" "),a("p",[t._v("最后我们调用"),a("strong",[t._v("XMLHttpRequest")]),t._v(" 的"),a("code",[t._v("send")]),t._v("方法根据情况向后端传递参数。这样我们既完成了原生的JS请求方式。")]),t._v(" "),a("h3",{attrs:{id:"我们来一个实例"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#我们来一个实例"}},[t._v("#")]),t._v(" 我们来一个实例")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('<!DOCTYPE html>\n<html lang="en">\n<head>\n    <meta charset="UTF-8">\n    <meta http-equiv="X-UA-Compatible" content="IE=edge">\n    <meta name="viewport" content="width=device-width, initial-scale=1.0">\n    <title>Document</title>\n</head>\n<body>\n    \x3c!--  原生的请求方式 --\x3e\n    <script>\n        let xhr = new XMLHttpRequest()\n        xhr.open(\'GET\', \'https://www.fastmock.site/mock/39ac87de3060aa2bb2ba20a0ff375c81/cat-movie/mostLike\')\n        xhr.onreadystatechange = function () {     //监听\n            if (xhr.readyState === 4 && xhr.status === 200) {\n                console.log(JSON.parse(xhr.responseText));\n            }\n        }\n        xhr.send()\n    <\/script>\n</body>\n</html>\n')])])]),a("p",[a("img",{attrs:{src:"https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/8b688435a52f438b8addde0927f72499~tplv-k3u1fbpfcp-watermark.image?",alt:"屏幕截图(86).png"}})]),t._v(" "),a("h2",{attrs:{id:"直接使用封装好的ajax方法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#直接使用封装好的ajax方法"}},[t._v("#")]),t._v(" 直接使用封装好的Ajax方法")]),t._v(" "),a("p",[t._v("我们先来看一看封装好的Ajax方法的使用方式，我们同样是可以向后端请求到数据，而且会你原生JS的请求方式更加的便捷。")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('<!DOCTYPE html>\n<html lang="en">\n<head>\n    <meta charset="UTF-8">\n    <meta http-equiv="X-UA-Compatible" content="IE=edge">\n    <meta name="viewport" content="width=device-width, initial-scale=1.0">\n     <script src="https://cdn.bootcdn.net/ajax/libs/jquery/3.6.1/jquery.min.js"><\/script>\n    <title>Document</title>\n</head>\n<body>\n    <<script>\n        $.ajax({\n            url:\'https://www.fastmock.site/mock/39ac87de3060aa2bb2ba20a0ff375c81/cat-movie/mostLike\',\n            method: \'GET\',\n            dataType:\'json\',\n            data:null,\n            async: true,\n            cache: true,\n            success: res => {\n                console.log(res);\n            }\n         })\n    <\/script> \n</body>\n</html>\n')])])]),a("p",[a("img",{attrs:{src:"https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/a22c35a3c2344e18b6647c71ee9d0c3f~tplv-k3u1fbpfcp-watermark.image?",alt:"屏幕截图(87).png"}})]),t._v(" "),a("h2",{attrs:{id:"手撸一个简化版ajax"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#手撸一个简化版ajax"}},[t._v("#")]),t._v(" 手撸一个简化版Ajax")]),t._v(" "),a("p",[t._v("在看完直接封装的Ajax方法，那我们是否好奇它是怎么实现的呢？那接下来我们就来自己封装一个简化版的Ajax来看看他的实现原理吧。")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('HTML代码：\n<!DOCTYPE html>\n<html lang="en">\n<head>\n    <meta charset="UTF-8">\n    <meta http-equiv="X-UA-Compatible" content="IE=edge">\n    <meta name="viewport" content="width=device-width, initial-scale=1.0">\n    <script src="ajax.js"><\/script>\n    <title>Document</title>\n</head>\n<body>\n    <script>\n        ajax({\n            url: \'https://www.fastmock.site/mock/39ac87de3060aa2bb2ba20a0ff375c81/cat-movie/mostLike\',\n            method: \'GET\',\n            dataType: \'json\',\n            data: {\n                name: \'abc\',\n                age: 10\n            },\n            async: true,\n            cache: true,\n            success: res => {\n               console.log(res);\n            }\n        })\n    <\/script> \n</body>\n</html>\n')])])]),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("JS代码部分:\nfunction  ajax(options) {\n    let {  // 结构前端参数\n        url,\n         method= 'GET',\n          data= null,\n          dataType= 'JSON',\n          async = true,\n          cache = true,\n          success,\n          error\n        } = options\n    let xhr = new XMLHttpRequest() \n    // 处理参数\n    if(method.toUpperCase() === 'GET') { // 处理不同的请求方式\n        if(data) {\n            url += '?'\n            for(let key in data) {\n                url += `${key}=${data[key]}&`\n            }\n            xhr.open(method, url, async)\n            xhr.send()\n        }\n    }else {  //post\n        xhr.open(method, url, async)\n        xhr.setRequestHeader('Content-Type', 'application/x-www-form-urlencoded') // 请求头\n        xhr.send(data)\n    }\n    xhr.onreadystatechange = () =>{ // 监听请求是否成功，并返回数据\n        if(xhr.readyState === 4){\n            if( !/^(2|3)\\d{2}$/.test(xhr.status)) {\n                error && error(xhr.statusText, xhr)\n            }\n           let result =  handleDataType(xhr)  //格式化处理\n           success && success(result, xhr)\n        }\n    }\n    function handleDataType(xhr) { //拿到前端需要的数据格式，进行格式化处理\n       dataType = dataType.toUpperCase()\n       let  result = xhr.responseText\n        switch(dataType) {\n            case 'TEXT':\n                break;\n            case 'JSON':\n                result = JSON.parse(result)\n                break;\n            case 'XML':\n                result = xhr.responseXML\n                break;\n            default:\n        }\n        return result\n    }\n}\n")])])]),a("p",[t._v("在通过简单的封装，我们自己的封装的Ajax也能实现JQ里封装好的ajax的部分功能。")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/ed9e978676e3481c95585742e50918b5~tplv-k3u1fbpfcp-watermark.image?",alt:"屏幕截图(88).png"}})]),t._v(" "),a("h1",{attrs:{id:"总结"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#总结"}},[t._v("#")]),t._v(" 总结")]),t._v(" "),a("p",[t._v("话已至此，便落下帷幕。学习阶段，欢迎各位大神补充观点。")])])}),[],!1,null,null,null);e.default=s.exports}}]);