(window.webpackJsonp=window.webpackJsonp||[]).push([[22],{738:function(e,t,n){"use strict";n.r(t);var a=n(4),r=Object(a.a)({},(function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[n("h1",{attrs:{id:"前言"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#前言"}},[e._v("#")]),e._v(" 前言")]),e._v(" "),n("p",[e._v("在JavaScript语言中，你是否分的清什么时候是深拷贝，什么时候是浅拷贝呢？到底我们拷贝完一个对象后，怎样的拷贝会导致新对象引起原对象改变，怎样的拷贝不会导致原对象随新对象改变呢？下面我就来介绍一下深浅拷贝吧。")]),e._v(" "),n("h1",{attrs:{id:"浅拷贝的定义"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#浅拷贝的定义"}},[e._v("#")]),e._v(" 浅拷贝的定义")]),e._v(" "),n("p",[e._v("顾名思义，浅拷贝拷贝出来的原对象里面的值会随着新对象改变而改变，也就是说浅拷贝是将引用地址拷贝给一个新的对象，所以当引用地址对应的值发生变化时，原对象和新对象都会改变。"),n("strong",[e._v("简而言之就是两个对象共用一个引用地址")]),e._v("。")]),e._v(" "),n("h1",{attrs:{id:"深拷贝的定义"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#深拷贝的定义"}},[e._v("#")]),e._v(" 深拷贝的定义")]),e._v(" "),n("p",[e._v("当我们知道了浅拷贝的定义后，那深拷贝既是拷贝出两个一模一样的两个对象，并且这两个对象更改自己的值不会影响另外一个对象里面的值,"),n("strong",[e._v("也就是说深拷贝的两个对象不共用一个引用地址。")])]),e._v(" "),n("h1",{attrs:{id:"实现深or浅拷贝的方法"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#实现深or浅拷贝的方法"}},[e._v("#")]),e._v(" 实现深or浅拷贝的方法")]),e._v(" "),n("h2",{attrs:{id:"浅拷贝"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#浅拷贝"}},[e._v("#")]),e._v(" 浅拷贝")]),e._v(" "),n("h3",{attrs:{id:"_1、赋值"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_1、赋值"}},[e._v("#")]),e._v(" 1、赋值")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("let a = {\n     age: 1\n }\n let b = a\n a.age = 2\n console.log(b.age); // 2\n b.age = 3\n console.log(a.age); // 3\n")])])]),n("p",[e._v("赋值就是一个很典型的浅拷贝，由于两个对象使用的是同一个引用地址，所以当值改变时，两个对象都会改变。")]),e._v(" "),n("h3",{attrs:{id:"_2-object-assign"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_2-object-assign"}},[e._v("#")]),e._v(" 2. Object.assign()")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("let a = {\n    like:{\n        n1:'reading',\n        n2:'runding'\n    }\n}\nlet b = Object.assign({},a)\na.like = {  //深拷贝   {like: { n1: 'reading', n2: 'runding' } }\n    n3:'coding' \n}\na.like.n1 = 'coding' //浅拷贝  {like: { n1: 'coding', n2: 'runding' } }\nconsole.log(b);\n")])])]),n("p",[e._v("当我们使用"),n("code",[e._v("Object.assign()")]),e._v("拷贝一个对象后，"),n("strong",[e._v("原对象第一层值变化时，新对象的值不会改变，为深拷贝。原对象非第一层值变化时，新对象的值会改变，为浅拷贝。")])]),e._v(" "),n("h3",{attrs:{id:"_3-解构"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_3-解构"}},[e._v("#")]),e._v(" 3. 解构")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("let a = {\n    age: 1,\n    like: {\n        n1: 'reading',\n        n2: 'runding'\n    }\n}\nlet b = { ...a }\na.age = 2 //深拷贝\na.like.n1 = 'coding'   //浅拷贝\nconsole.log(b);\n")])])]),n("p",[n("code",[e._v("解构")]),e._v("方法与"),n("code",[e._v("Object.assign()")]),e._v("十分相似，可以参照"),n("code",[e._v("Object.assign()")]),e._v("的解释")]),e._v(" "),n("h2",{attrs:{id:"深拷贝"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#深拷贝"}},[e._v("#")]),e._v(" 深拷贝")]),e._v(" "),n("h3",{attrs:{id:"_1-json-parse-和-json-stringify"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_1-json-parse-和-json-stringify"}},[e._v("#")]),e._v(" 1. JSON.parse() 和 JSON.stringify()")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("let a = {\n    age: 1\n}\nlet  c = JSON.parse(JSON.stringify(a))\na.age = 3\nconsole.log(c.age); // 1\n")])])]),n("p",[e._v("当我们使用"),n("code",[e._v("JSON.parse()")]),e._v(" 和 "),n("code",[e._v("JSON.stringify()")]),e._v(" 和对"),n("code",[e._v("c")]),e._v("赋值时，当原对象改变时，新对象不会随之改变。")]),e._v(" "),n("h4",{attrs:{id:"注意"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#注意"}},[e._v("#")]),e._v(" 注意")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("let obj = {\n    a:1,\n    b:{\n        c:2,\n        d:3\n    },\n    e:undefined,\n    f:Symbol('hello'),\n    g:function(){}\n}\nlet newobj = JSON.parse(JSON.stringify(obj))\nconsole.log(newobj); //{ a: 1, b: { c: 2, d: 3 } }\n")])])]),n("p",[e._v("还有一点要注意的就是"),n("code",[e._v("JSON.parse() 和 JSON.stringify()")]),n("strong",[e._v("不能拷贝undefined、Symbol类型、函数。")])]),e._v(" "),n("h2",{attrs:{id:"可深可浅方法"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#可深可浅方法"}},[e._v("#")]),e._v(" 可深可浅方法")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("let arr = ['old', 1, true, null, undefined]\nlet newArr = arr.concat() //深拷贝\nlet newArr1 = arr.slice() //深拷贝\narr[0] = 'new'\nconsole.log(newArr); // [ 'old', 1, true, null, undefined ]\nconsole.log(newArr1); // [ 'old', 1, true, null, undefined ]\n")])])]),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("let arr = [{old:'old'},['old']]\nlet newArr = arr.concat()  //浅拷贝\nlet newArr1 = arr.slice()  //浅拷贝\narr[0].old = 'new'  \narr[1][0] = 'new'\nconsole.log(newArr);\nconsole.log(newArr1);\n")])])]),n("p",[e._v("当arr为原始类型时，即为深拷贝，为引用类型时，即为浅拷贝。（和"),n("code",[e._v("Object.assign()")]),e._v("的原理很相似。）")]),e._v(" "),n("h1",{attrs:{id:"手写深or浅拷贝的方法"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#手写深or浅拷贝的方法"}},[e._v("#")]),e._v(" 手写深or浅拷贝的方法")]),e._v(" "),n("h2",{attrs:{id:"浅拷贝-2"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#浅拷贝-2"}},[e._v("#")]),e._v(" 浅拷贝")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("function shallowCopy(obj) {\n    if(typeof obj !== 'object') return\n    var newObj = obj instanceof Array ? [] : {}\n    for(let i in obj){\n    if(obj.hasOwnProperty(i)){\n        newObj[i] = obj[i]\n    }\n    }\n    return newObj\n}\nlet a =[{c:1},2,3,[2]]\nlet b = shallowCopy(a)\na[0].c = 222\nconsole.log(b); // [ { c: 222 }, 2, 3, [ 2 ] ]\n")])])]),n("p",[e._v("这里有一点我们要注意的就是，"),n("strong",[e._v("在浅拷贝的方法里，原始类型还是为深拷贝。")])]),e._v(" "),n("h2",{attrs:{id:"深拷贝-2"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#深拷贝-2"}},[e._v("#")]),e._v(" 深拷贝")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("function deepCopy(obj) {\n    if (typeof obj !== 'object') return  //递归结束条件\n    let newObj = Array.isArray(obj) ? [] : {}; // 判断类型\n    for (let i in obj) {\n        if(obj.hasOwnProperty(i)){\n            newObj[i] = typeof obj[i] === 'object' ? deepCopy(obj[i]) : obj[i] // 递归方法，进行拷贝\n        }\n    }\n    return newObj;\n}\nlet a =[{c:1},2,3,[2]]\nlet b = deepCopy(a)\na[0].c = 222\nconsole.log(b);\n")])])]),n("p",[e._v("深拷贝即时一层一层递归进行拷贝复制，实现了不会随原始值变化而变化的深拷贝。")]),e._v(" "),n("h1",{attrs:{id:"jquery的extend方法"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#jquery的extend方法"}},[e._v("#")]),e._v(" jQuery的extend方法")]),e._v(" "),n("h2",{attrs:{id:"_1-介绍"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_1-介绍"}},[e._v("#")]),e._v(" 1. 介绍")]),e._v(" "),n("p",[n("code",[e._v("jQuery.extend()")]),e._v(" 函数用于 "),n("strong",[e._v("将一个或多个对象的内容合并到目标对象")]),e._v("。这一点与"),n("code",[e._v("Object.assign()")]),e._v("方法相似。")]),e._v(" "),n("p",[e._v("但extend方法还有一个特点就是 "),n("strong",[e._v("可以通过第一个参数控制合并对象时为深拷贝还是浅拷贝。")])]),e._v(" "),n("p",[e._v("语法： "),n("em",[e._v("$")]),e._v(" .extend( [deep ], target, object1 [, objectN ] )")]),e._v(" "),n("table",[n("thead",[n("tr",[n("th",[n("em",[e._v("deep")])]),e._v(" "),n("th",[e._v('可选。 Boolean类型 指示是否深度合并对象，默认为false。如果该值为true，且多个对象的某个同名属性也都是对象，则该"属性对象"的属性也将进行合并。')])])]),e._v(" "),n("tbody",[n("tr",[n("td",[n("em",[e._v("target")])]),e._v(" "),n("td",[e._v("Object类型 目标对象，其他对象的成员属性将被附加到该对象上。")])]),e._v(" "),n("tr",[n("td",[n("em",[e._v("object1")])]),e._v(" "),n("td",[e._v("可选。 Object类型 第一个被合并的对象。")])]),e._v(" "),n("tr",[n("td",[n("em",[e._v("objectN")])]),e._v(" "),n("td",[e._v("可选。 Object类型 第N个被合并的对象。")])])])]),e._v(" "),n("h2",{attrs:{id:"_2-实现"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_2-实现"}},[e._v("#")]),e._v(" 2.实现")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("function extend() {\n    let deep = false  // 默认为浅拷贝\n    let length = arguments.length\n    let target = arguments[0] || {}\n    let i =  1  \n    let options;\n    //用户开启了深拷贝\n    if(typeof target == 'boolean') {\n        deep = target\n        target = arguments[i] || {}\n        i++\n    }\n    if(typeof target !== 'object') {\n        target = {}\n    }\n    for(;i< length; i++){\n        options = arguments[i]\n        if(options != null) {\n            for(let key in options) {\n                //目标属性值\n                let src = target[key]\n                //要复制的对象属性值\n                let copy = options[key]\n                if(deep && copy && typeof copy == 'object'){\n                    target[key] = extend(deep,src,copy) // 深拷贝\n                }else if (copy !== undefined){\n                    target[key] = copy // 浅拷贝\n               }\n            }\n        }\n    }\n    return target\n}\n")])])]),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("let obj1 = {\n    a: 1,\n    b:{b1:1,b2:2},\n    e:{d:2}\n}\nlet obj2 = {\n    b:{b1:3,b2:4},\n    c:3\n}\nlet obj3 = {\n    d:4\n}\nlet newObj =  extend(false, {},obj1, obj2, obj3) //浅拷贝\nlet newObj1 =  extend(true, {},obj1, obj2, obj3) // 深拷贝\nobj2.b.b1 = 33\nobj2.b.b2 = 33\nobj1.e.d = 0\nconsole.log(newObj); // { a: 1, b: { b1: 33, b2: 33 }, e: { d: 0 }, c: 3, d: 4 }\nconsole.log(newObj1); // { a: 1, b: { b1: 3, b2: 4 }, e: { d: 2 }, c: 3, d: 4 }\n")])])])])}),[],!1,null,null,null);t.default=r.exports}}]);