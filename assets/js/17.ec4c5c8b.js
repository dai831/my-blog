(window.webpackJsonp=window.webpackJsonp||[]).push([[17],{729:function(e,n,a){"use strict";a.r(n);var t=a(4),s=Object(t.a)({},(function(){var e=this,n=e.$createElement,a=e._self._c||n;return a("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[a("h2",{attrs:{id:"前言"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#前言"}},[e._v("#")]),e._v(" 前言")]),e._v(" "),a("p",[e._v("关于异步处理问题，ES5的回调让我们陷入回调地狱轮回，后来ES6诞生了"),a("code",[e._v("Promise")]),e._v("（"),a("a",{attrs:{href:"https://juejin.cn/post/7122431169710260237",target:"_blank",rel:"noopener noreferrer"}},[e._v("Promise不了解？点这了解"),a("OutboundLink")],1),e._v("）让我们脱离轮回，终于，在ES7更新出"),a("code",[e._v("async-await")]),e._v("让我们更优雅的处理回调问题。今天我们就来解析解析 "),a("code",[e._v("async-await")]),e._v("和"),a("code",[e._v("Promise")]),e._v("有何联系和区别。")]),e._v(" "),a("h2",{attrs:{id:"asnyc-await"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#asnyc-await"}},[e._v("#")]),e._v(" asnyc-await")]),e._v(" "),a("p",[e._v("async 函数是使用"),a("code",[e._v("async")]),e._v("关键字声明的函数。 async 函数是["),a("code",[e._v("AsyncFunction")]),e._v("]构造函数的实例， 并且其中允许使用"),a("code",[e._v("await")]),e._v("关键字。"),a("code",[e._v("async")]),e._v("和"),a("code",[e._v("await")]),e._v("关键字让我们可以用一种更简洁的方式写出基于["),a("code",[e._v("Promise")]),e._v("]的异步行为，而无需刻意地链式调用"),a("code",[e._v("promise")]),e._v("。")]),e._v(" "),a("h3",{attrs:{id:"asnyc"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#asnyc"}},[e._v("#")]),e._v(" asnyc")]),e._v(" "),a("p",[a("strong",[e._v("async")]),e._v("关键字用于声明异步函数，它可以在函数声明、函数表达式还有箭头函数中使用,方法如下：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v(" 1.   async function Async(){}\n    \n 2.   let Async = async function(){}\n    \n 3.   let Async = async ()=>{}\n")])])]),a("p",[e._v("在这我们要注意是"),a("code",[e._v("await")]),e._v(" 不能够单独出现，其函数前面一定要有 "),a("code",[e._v("async")]),e._v(" ,所以在我们使用时 "),a("code",[e._v("async")]),e._v(" 和 "),a("code",[e._v("await")]),e._v(" 要结合起来一起使用才有意义。")]),e._v(" "),a("h3",{attrs:{id:"await"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#await"}},[e._v("#")]),e._v(" await")]),e._v(" "),a("p",[e._v("当我们使用"),a("strong",[e._v("async")]),e._v(" 声明了一个异步函数，那么我们就可以在这个异步函数内部使用"),a("code",[e._v("await")]),e._v("关键字。下面我就用几段代码来理解"),a("code",[e._v("async-await")]),e._v("的用法和"),a("code",[e._v("promise")]),e._v("的不同。")]),e._v(" "),a("p",[e._v("我们先来看看"),a("code",[e._v("asnyc-await")]),e._v("怎么用吧！")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("function getJSON(){\n    return new Promise((resolve, reject) => {\n        setTimeout(() =>{\n        console.log('JSON');\n        resolve('ok');\n    },500)\n    })\n }\n async function testAsync(){\n    await getJSON();  \n    console.log('数据拿到了');\n }\ntestAsync()\n")])])]),a("p",[a("img",{attrs:{src:"https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/c10cb5e0c70742c791f41c9bfa2c690e~tplv-k3u1fbpfcp-watermark.image?",alt:"微信图片_20220728210537.png"}}),e._v("\n在上面这段代码中，我们显然可以看出这是一段异步代码，但是这里我们没有用 "),a("code",[e._v("promise.then")]),e._v(" 或者回调来解决，我们用的是"),a("code",[e._v("async-await")]),e._v("来解决，下面我来解析解析"),a("code",[e._v("async-await")]),e._v("的用法：首先我们要在在函数"),a("code",[e._v("testAsync")]),e._v("前添加"),a("code",[e._v("async")]),e._v("，接下来我们用异步代码的调用前添加"),a("code",[e._v("await")]),e._v("，这样的话"),a("code",[e._v("testAsync")]),e._v("函数下面的代码等待异步代码先执行。这就是"),a("code",[e._v("asnyc-await")]),e._v("解决异步回调问题的用法。")]),e._v(" "),a("p",[e._v("既然我们已经知道了"),a("code",[e._v("async-await")]),e._v("的用法下面我们再来一段代码，来给"),a("code",[e._v("promise")]),e._v("和"),a("code",[e._v("asnyc-await")]),e._v("两种方法做个比较：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("function getJSON() {\n    return new Promise((resolve, reject) => {\n        setTimeout(() => {\n            console.log(2);\n            resolve(2)\n        }, 2000);\n    })\n function testAsync() {\n     return Promise.resolve(2).then(() =>{\n         getJSON()\n     })\n     .then(() =>{\n        console.log(3);\n     })\n}\ntestAsync()\n\n //相当于\n \nfunction getJSON() {\n    return new Promise((resolve, reject) => {\n        setTimeout(() => {\n            console.log(2);\n            resolve(2)\n        }, 2000);\n    })\n}\nasync function testAsync() {\n    await getJSON()\n     console.log(3);\n}\ntestAsync()\n")])])]),a("p",[a("img",{attrs:{src:"https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/d496dac9d048494586fb511452e186a0~tplv-k3u1fbpfcp-watermark.image?",alt:"微信图片_20220728211658.png"}}),e._v("\n在上面这段中，我们就可以看出，我们使用 "),a("code",[e._v("await")]),e._v(" ，解释器都创建了一个 "),a("code",[e._v("Promise")]),e._v(" 对象，把剩下的"),a("code",[e._v("async")]),e._v("函数中的操作都放到 "),a("code",[e._v("then")]),e._v(" 回调函数中。"),a("code",[e._v("async/await")]),e._v(" 的实现，离不开 "),a("code",[e._v("Promise")]),e._v(" 。从字面意思来理解 "),a("code",[e._v("async")]),e._v(" 是“异步”的简写， "),a("code",[e._v("await")]),e._v(" 是 "),a("code",[e._v("async await")]),e._v(" 的简写，可以理解为等待异步执行结束之后再执行。")]),e._v(" "),a("p",[e._v("既然我们看清了"),a("code",[e._v("async-await")]),e._v("和"),a("code",[e._v("promise")]),e._v("的区别,那下面我们就来聊聊"),a("code",[e._v("async-await")]),e._v("的执行顺序:")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("console.log('start');\nasync function async1() {\n    await async2() // 新款浏览器为 await 开辟了特别通道，执行提前了\n    console.log('async1 end'); // 来到了当前这一次事件循环的微任务序列\n}\n\nasync function async2() {\n    console.log('async2 end');\n}\nasync1()\nsetTimeout(() => {\n    console.log('setTimeout');\n}, 0)\nnew Promise(resolve => {\n    console.log('Promise');\n    resolve()\n})\n    .then(() => {\n        console.log('promise1');\n    })\n    .then(() => {\n        console.log('promise2');\n    })\nconsole.log('end');\n")])])]),a("p",[a("img",{attrs:{src:"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/b8b3c3f7b8a44e0593a94dc97972304f~tplv-k3u1fbpfcp-watermark.image?",alt:"微信图片_20220728212300.png"}})]),e._v(" "),a("p",[e._v("我们来分析这段代码的打印顺序，首先我们会打印同步代码，所以打印出"),a("code",[e._v("start")]),e._v("，然后我们就好奇了为什么下面一个打印的不是"),a("code",[e._v("Promise")]),e._v("而是"),a("code",[e._v("async2 end")]),e._v(", 明明"),a("code",[e._v("async2")]),e._v("是异步代码，为啥会先打印呢？这是因为浏览器为 "),a("code",[e._v("await")]),e._v(" 开辟了特别通道，执行提前了。所以第二个打印的就是"),a("code",[e._v("async2 end")]),e._v(" （可以理解为吧async看成同步代码）之后也就自然打印Promise，end等同步代码，接下来就要执行异步代码了，也就依次打印出了"),a("code",[e._v("async1 end")]),e._v(" 、"),a("code",[e._v("promise")]),e._v(" 、"),a("code",[e._v("promise2")]),e._v(" ，最后打印"),a("code",[e._v("setTimeout")]),e._v("。")]),e._v(" "),a("h2",{attrs:{id:"结语"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#结语"}},[e._v("#")]),e._v(" 结语")]),e._v(" "),a("p",[e._v("这就是我对"),a("code",[e._v("async-await")]),e._v("的解析，我们不难看出，ES7更新出"),a("code",[e._v("async-await")]),e._v("就是简化了"),a("code",[e._v("promise")]),e._v("的写法，将异步回调的处理变得更加简便。")])])}),[],!1,null,null,null);n.default=s.exports}}]);