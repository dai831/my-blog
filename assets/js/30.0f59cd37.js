(window.webpackJsonp=window.webpackJsonp||[]).push([[30],{744:function(t,e,r){"use strict";r.r(e);var n=r(4),o=Object(n.a)({},(function(){var t=this,e=t.$createElement,r=t._self._c||e;return r("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[r("h1",{attrs:{id:"前言"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#前言"}},[t._v("#")]),t._v(" 前言")]),t._v(" "),r("p",[t._v("在我们了解router的实现原理之前，我们先来聊聊vue的路由跳转到底是怎样的吧！")]),t._v(" "),r("p",[t._v("首先，我们知道vue创建的项目其实是一个单页应用。在我们对vue项目进行打包以后，我们所有的代码都会被成一份HTML和一份JS，那我们创建的那么多.vue文件是如何实现通信的呢？")]),t._v(" "),r("p",[t._v("这时我们今天的主角就登场啦，vue-router就是vue官方定义的路由插件，其作用有如下两点：")]),t._v(" "),r("ul",[r("li",[t._v("路由用户设定访问路径的，将路径和组件映射起来。")]),t._v(" "),r("li",[t._v("在vue-router的单页面应用中，页面的路径的改变就是组件的切换")])]),t._v(" "),r("h1",{attrs:{id:"实现一个router"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#实现一个router"}},[t._v("#")]),t._v(" 实现一个router")]),t._v(" "),r("h2",{attrs:{id:"vue官方版router"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#vue官方版router"}},[t._v("#")]),t._v(" vue官方版router")]),t._v(" "),r("p",[t._v("首先，我们先来看看官方版router，官方版router的实现步骤有五步。我们先来分析分析五步都在干什么。")]),t._v(" "),r("p",[r("img",{attrs:{src:"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/911177446e004cddbec29233e85fa500~tplv-k3u1fbpfcp-watermark.image?",alt:"2FHSKT%ANM{2P~AGW$C.png"}})]),t._v(" "),r("p",[t._v("1：第一步我们在我们的router文件夹下的index.js文件中引入了‘vue-router’插件，将其引入到我们的项目中。")]),t._v(" "),r("p",[r("img",{attrs:{src:"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/d80ada1ba8354457bfe5a61dc2400974~tplv-k3u1fbpfcp-watermark.image?",alt:"X5O.png"}}),t._v("\n2：第二步我们就要在我们的Vue实例对象中，use掉我们引入的插件，使我们可以在这个实例对象中可以使用VueRouter。")]),t._v(" "),r("p",[r("img",{attrs:{src:"https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/ed957c1ec4a64a36a71956b315a5dce9~tplv-k3u1fbpfcp-watermark.image?",alt:"RU.png"}})]),t._v(" "),r("ol",{attrs:{start:"3"}},[r("li",[t._v("第三步我们在index.js定义了routes数组给用户来定义其要路由跳转的路径和对路径进行重定向，如上图，第一个对象就是对路由进行重定向，第二个对象就是定义路由跳转的路径。")])]),t._v(" "),r("p",[r("img",{attrs:{src:"https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/b4b583ab090f474ea680dbfc5cba178f~tplv-k3u1fbpfcp-watermark.image?",alt:"UNO{(J{I%4%I}_Y32%CQ%QI.png"}})]),t._v(" "),r("p",[r("img",{attrs:{src:"https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/afd6b1251bf24f22bd3553de128143d7~tplv-k3u1fbpfcp-watermark.image?",alt:"63XVLG9A_U1E%IKYEU8G(~J.png"}})]),t._v(" "),r("p",[t._v("4.第四步我们就要是new出我们的路由实例对象，选择跳转模式和根路径，同时把我们定义的routes数组给到路由实例对象，再将其抛出，之后我们就可以在main.js中引入引入我们抛出的路由对象了。")]),t._v(" "),r("p",[r("img",{attrs:{src:"https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/7744cabdc9f6499aa2bd079a54e7ddd5~tplv-k3u1fbpfcp-watermark.image?",alt:"VWBH0N.png"}}),t._v("\n5.第五步是最重要的一步，我们要调用router对象中内置的router-link和router-view组件，让其可以在页面中显示出来。这样我们就可以肆无忌惮的跳转页面了。")]),t._v(" "),r("h2",{attrs:{id:"自己实现一个vuerouter"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#自己实现一个vuerouter"}},[t._v("#")]),t._v(" 自己实现一个VueRouter")]),t._v(" "),r("p",[t._v("在我们看完官方版路由后，我们就该疑惑了，在我们引入的这个vue-router组件中，他是怎样让我们可以如此轻松的实现路由跳转的呢？")]),t._v(" "),r("p",[t._v("这时我们就要提出疑惑了，VueRouter这个构造函数中到底创建了什么方法，可以让我们将模式，根路径，跳转路径三个参数传递进去就可以帮我们实现路由跳转的呢？")]),t._v(" "),r("p",[t._v("在官方版VueRouter构造函数中，我们可以看出我们需要处理的由三个东西，第一个就是处理路由跳转的模式（mode），第二个就要处理的就是路由跳转的路径（routes），第三个就要处理路由的根路径和跳转组件。")]),t._v(" "),r("h3",{attrs:{id:"vuerouter构造函数的实现"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#vuerouter构造函数的实现"}},[t._v("#")]),t._v(" VueRouter构造函数的实现")]),t._v(" "),r("p",[t._v("下面我们来自己创建VueRouter构造函数，同时我们再来分析分析他的实现原理。")]),t._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[t._v("class HistoryRoute { // 保存当前路径状态\n    constructor() {\n        this.current = null // 用来记录当前路由的路径的变量\n    }\n}\nclass VueRouter {\n    constructor(options) {\n        this.mode = options.mode || 'hash'  // 用来记录路由模式的边疆\n        this.routes = options.routes  // 跳转路径数组\n        this.routesMap = this.createMap(this.routes) // 路径对象\n        this.history = new HistoryRoute()\n        this.init()\n    }\n    createMap(routes) { // 当前的路由对象\n        return routes.reduce((pre, current) => {\n            pre[current.path] = current.component  // '/' : Home, '/about' : About\n            return pre\n        },{})\n    }\n    init() {  \n        if(this.mode == 'hash') { // 根据路由跳转的方式，改变路由的实例对象\n            location.hash ? '' : location.hash = '/'\n            window.addEventListener('load', () => {\n                this.history.current = location.hash.slice(1)\n            })\n            window.addEventListener('hashchange', () => {\n                this.history.current = location.hash.slice(1)\n            })\n        }else {\n            location.pathname ? '' : location.pathname = '/'\n            window.addEventListener('load', () => {\n                this.history.current = location.pathname\n            })\n            window.addEventListener('popstate', () => {\n                this.history.current = location.pathname\n            })\n        }\n    }\n}\n")])])]),r("h3",{attrs:{id:"在vue实例对象中混入vue-router"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#在vue实例对象中混入vue-router"}},[t._v("#")]),t._v(" 在Vue实例对象中混入Vue-Router")]),t._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[t._v("let Vue = null  // vue 的实例对象\nVueRouter.install = function (params) { // 在VueRouter实例对象的原型上挂上install方法\n    Vue = params\n    // console.log(Vue); \n    Vue.mixin({  //将在其他地方写的api方法混入vue实例对象中\n        beforeCreate() {\n            if(this.$options && this.$options.router) { // 根组件\n                this._root =this\n                this._router = this.$options.router\n                Vue.util.defineReactive(this, 'xxx', this._router.history)\n            }else{ //子组件\n                this._root = this.$parent  && this.$parent._root\n            }\n            Object.defineProperty(this, '$router', {\n                get () {\n                    return this._root.router\n                }\n            })\n            Object.defineProperty(this, '$route', {\n                get () {\n                    return this._root.router.history.current\n                }\n            })\n        }\n    })\n    Vue.component('router-link', { // 自带的组件注册  声明全局组件\n        props:{\n            to: String\n        },\n        render(h) {\n            let mode = this._self._root._router.mode\n            let to = mode === 'hash' ? '#'+this.to : this.to\n            return h('a', {attrs:{href:to }}, this.$slots.default)\n        }\n    })\n    Vue.component('router-view', {\n        render(h) {\n            let current = this._self._root._router.history.current // 当前路由地址 '/about'\n            let routeMap = this._self._root._router.routesMap  // 所有路由对象\n            return h(routeMap[current])\n        }\n    })\n}\nexport default VueRouter\n")])])]),r("p",[t._v("这样我们直接调用我们自己的MyRouter函数，实现路由跳转，下面我们来看看效果：")]),t._v(" "),r("p",[r("img",{attrs:{src:"https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/26b73dd0ecd44183bf538580dca2347d~tplv-k3u1fbpfcp-watermark.image?",alt:"QQ录屏20221010223312_1.gif"}})])])}),[],!1,null,null,null);e.default=o.exports}}]);