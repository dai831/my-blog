(window.webpackJsonp=window.webpackJsonp||[]).push([[21],{733:function(e,n,t){"use strict";t.r(n);var a=t(4),s=Object(a.a)({},(function(){var e=this,n=e.$createElement,t=e._self._c||n;return t("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[t("h1",{attrs:{id:"_1-前言"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-前言"}},[e._v("#")]),e._v(" 1. 前言")]),e._v(" "),t("p",[e._v("首先我们要知道"),t("strong",[e._v("继承是一种代码重用的形式")]),e._v("，"),t("strong",[e._v("JavaScript又是一门基于原型的语言")]),e._v("，这就意味着对象直接从其他对象继承。为了显著的减少软件开发的成本，提高代码的重用性，JavaScript的继承方式也是我们要学会的知识。那下面我就来介绍JavaScript 6种常用的继承方式。")]),e._v(" "),t("h2",{attrs:{id:"_2-原型链继承"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-原型链继承"}},[e._v("#")]),e._v(" 2. 原型链继承")]),e._v(" "),t("p",[e._v("原型链继承就是让一个构造函数的原型是继承于另一个构造函数的实例，这样这个构造函数new出来的实例对象就会有另一个构造函数的属性。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("SuperType.prototype.getSuperValue = function() {\n    return this.property\n  }\n  function SuperType(t) {\n    this.property = t\n    this.like = {\n      sport: 'running',\n      book: 'js'\n    }\n    this.age = 18\n  }\n  Type.prototype = new SuperType()\n  function Type(t) {\n    this.typeproperty = t\n  }\n  var instance1 = new Type(false)\n  instance1.age = 20\n\n  console.log(instance1);\n")])])]),t("p",[t("img",{attrs:{src:"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/020c6f50ce674beb922da110445320e7~tplv-k3u1fbpfcp-watermark.image?",alt:"图片.png"}})]),e._v(" "),t("p",[e._v("如图所示，我们有一个"),t("code",[e._v("SuperType")]),e._v("构造函数，然后又创建了"),t("code",[e._v("Type")]),e._v("构造函数，同时让"),t("code",[e._v("Type")]),e._v("的原型赋值为"),t("code",[e._v("SuperType")]),e._v(" new出来的的实例对象，这样我们用"),t("code",[e._v("Type")]),e._v("new出来的实例对象原型上就可访问到"),t("code",[e._v("SuperType")]),e._v("的属性。这也就是原型链继承。")]),e._v(" "),t("ul",[t("li",[e._v("优点：写法简单，容易理解")]),e._v(" "),t("li",[e._v("缺点：")]),e._v(" "),t("li",[e._v("1.会在子类实例上共享父类所有的引用类型实例属性")]),e._v(" "),t("li",[e._v("2.不能给父类构造函数传参")])]),e._v(" "),t("h2",{attrs:{id:"_3-经典继承-伪造对象"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-经典继承-伪造对象"}},[e._v("#")]),e._v(" 3. 经典继承(伪造对象）")]),e._v(" "),t("p",[e._v("经典继承就是在子类的构造函数内部调用父类构造函数，再使用"),t("code",[e._v("call()")]),e._v("方法将父类的构造函数绑定到子类上。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("SuperType.prototype.val = 123\nfunction SuperType() {\n  this.colors = ['red', 'blue', 'green']\n}\nfunction Type(t) {\n  SuperType.call(this, t)\n}\nvar instance1 = new Type()\ninstance1.colors.push('pink')\nconsole.log(instance1);\nvar instance2 = new Type()\nconsole.log(instance2);\n")])])]),t("p",[t("img",{attrs:{src:"https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/fa83dc6b63f2487eb66a25925a9a1c01~tplv-k3u1fbpfcp-watermark.image?",alt:"图片.png"}})]),e._v(" "),t("p",[e._v("这样我们就是在子类构造函数"),t("code",[e._v("Type")]),e._v("继承到父类"),t("code",[e._v("SuperType")]),e._v("的"),t("code",[e._v("color")]),e._v("属性。")]),e._v(" "),t("ul",[t("li",[e._v("优点\n-解决了原型链不能传参的问题")]),e._v(" "),t("li",[e._v("缺点")]),e._v(" "),t("li",[e._v("1.方法都在父构造函数中定义，无法实现函数复用")]),e._v(" "),t("li",[e._v("2.子类继承不到父类原型上的属性")])]),e._v(" "),t("h2",{attrs:{id:"_4-组合继承-伪经典继承"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_4-组合继承-伪经典继承"}},[e._v("#")]),e._v(" 4. 组合继承（伪经典继承）")]),e._v(" "),t("p",[e._v("组合继承就是将"),t("strong",[e._v("原型链继承和经典继承组合结合起来")]),e._v("，使用原型链实现原型属性的继承，使用构造函数来实现对实例对象的继承。同时我们还可以实现函数的复用。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("SuperType.prototype.sayName = function() {\n    console.log(this.name);\n  }\n  function SuperType(name) {\n    this.name = name\n    this.colors = ['red', 'blue', 'green']\n  }\n  function Type(age, name) {\n    this.age = age\n    SuperType.call(this, name)\n  }\n  Type.prototype = new SuperType()\n  Type.prototype.constructor = Type\n  Type.prototype.sayAge = function() {\n    console.log(this.age);\n  }\n  var instance1 = new Type(18, 'zhangshan')\n  instance1.sayName()\n  instance1.sayAge()\n  console.log(instance1);\n")])])]),t("p",[t("img",{attrs:{src:"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/76afb1edb42d4fb98d5bb4d83207ca57~tplv-k3u1fbpfcp-watermark.image?",alt:"图片.png"}})]),e._v(" "),t("p",[e._v("我们通过了原型链继承拿到了父类的原型上的属性，又通过经典继承拿到了父类实例对象的属性。")]),e._v(" "),t("ul",[t("li",[e._v("优点：")]),e._v(" "),t("li",[e._v("解决了原型链继承和经典继承的缺陷。")]),e._v(" "),t("li",[e._v("缺点：重复调用了两次父类的构造函数。一次是在创建子类原型时，另一次在子类构造函数内部")])]),e._v(" "),t("h2",{attrs:{id:"_5-原型式继承"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_5-原型式继承"}},[e._v("#")]),e._v(" 5. 原型式继承")]),e._v(" "),t("p",[e._v("原型式继承是借用一个函数传入一个对象作为参数，再在其内部创建一个临时的构造函数，然后将"),t("strong",[e._v("参数作为这个构造函数的原型")]),e._v("，最后返回出这个构造函数的实例对象。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("function object(o) {\n    function F() {}\n    F.prototype = o\n    return new F()\n  }\n  var person = {\n    name: '张三',\n    age: 18,\n    like: {\n      sport: 'running'\n    }\n  }\n  var obj = object(person)\n  obj.like.sport = 'singing'\n  console.log(obj);\n")])])]),t("p",[t("img",{attrs:{src:"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/7a6b4c149595429eaa79cc1bf7b90364~tplv-k3u1fbpfcp-watermark.image?",alt:"图片.png"}})]),e._v(" "),t("p",[e._v("这样，我们"),t("code",[e._v("obj")]),e._v("对象就继承到了"),t("code",[e._v("person")]),e._v("身上的属性。")]),e._v(" "),t("ul",[t("li",[e._v("优点：")]),e._v(" "),t("li",[e._v("不需要单独创建构造函数")]),e._v(" "),t("li",[e._v("缺点：")]),e._v(" "),t("li",[e._v("属性中包含的引用值始终会在相关对象间共享，同时子类实例不能向父类传参")])]),e._v(" "),t("h2",{attrs:{id:"_6-寄生式继承"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_6-寄生式继承"}},[e._v("#")]),e._v(" 6. 寄生式继承")]),e._v(" "),t("p",[e._v("寄生式继承是"),t("strong",[e._v("创建一个仅用于封装继承过程的函数，该函数在内部以某种方式来增强对象，最后再返回对象")]),e._v("，优缺点和原型式继承相同。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("function createPerson(original) {\n    var clone = Object.create(original)\n    clone.say = function() { // 增强这个对象\n      console.log('hello');\n    }\n    return clone\n  }\n\n  let obj = createPerson({'name':'zhangsan'})\n  obj.say()\n  console.log(obj);\n")])])]),t("p",[t("img",{attrs:{src:"https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/d25a320b284f429582bf59d20647732b~tplv-k3u1fbpfcp-watermark.image?",alt:"图片.png"}})]),e._v(" "),t("h2",{attrs:{id:"_7-寄生组合式继承"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_7-寄生组合式继承"}},[e._v("#")]),e._v(" 7. 寄生组合式继承")]),e._v(" "),t("p",[e._v("寄生组合式继承是通过借用构造函数来继承属性，通过原型链的混成形式来继承方法。本质上就是使用寄生式继承来继承父类的原型，然后再将结果指定给子类型的原型")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("SuperType.prototype.sayName = function() {\n    console.log(this.name);\n  }\n  SuperType.prototype.like = {\n    a: 1,\n    b: 2\n  }\n  function SuperType(name) {\n    this.name = name\n    this.colors = ['red', 'blue', 'green']\n  }\n  function Type(name, age) {\n    this.age = age\n    SuperType.call(this, name)\n  }\n  var anotherPrototype = Object.assign(Type.prototype, SuperType.prototype)\n  Type.prototype = anotherPrototype // new SuperType()\n  var instance1 = new Type('Tom', 12)\n  // instance1.colors.push('pink')\n  instance1.like.a = 11\n  instance1.sayName()\n  console.log(instance1);\n")])])]),t("p",[t("img",{attrs:{src:"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/a087f2f8202d44b88b9315c08ca25b48~tplv-k3u1fbpfcp-watermark.image?",alt:"图片.png"}})]),e._v(" "),t("ul",[t("li",[e._v("优点：")]),e._v(" "),t("li",[e._v("只调用了一次父类构造函数，并且避免了子类原型上创建多余的属性。还可以保持原型链不变。（"),t("strong",[e._v("继承最优解")]),e._v("）")]),e._v(" "),t("li",[e._v("缺点：")]),e._v(" "),t("li",[e._v("代码复杂")])]),e._v(" "),t("h1",{attrs:{id:"_8-结语"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_8-结语"}},[e._v("#")]),e._v(" 8. 结语")]),e._v(" "),t("p",[e._v("除了这些继承方式，我们还可以用"),t("strong",[e._v("ES6中的class类")]),e._v("实现继承。学习阶段，欢迎指教，点个赞呗。")])])}),[],!1,null,null,null);n.default=s.exports}}]);