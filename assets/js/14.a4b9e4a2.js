(window.webpackJsonp=window.webpackJsonp||[]).push([[14],{726:function(e,n,t){"use strict";t.r(n);var s=t(4),o=Object(s.a)({},(function(){var e=this,n=e.$createElement,t=e._self._c||n;return t("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[t("h1",{attrs:{id:"_1、前言"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1、前言"}},[e._v("#")]),e._v(" 1、前言")]),e._v(" "),t("p",[e._v("上期说到，我们介绍了"),t("a",{attrs:{href:"https://juejin.cn/post/7174043835880701966",target:"_blank",rel:"noopener noreferrer"}},[e._v("数组各种好用的API手写"),t("OutboundLink")],1),e._v("，但除了数组这个数据结构，我们还有一种用的比数组还多的数据结构，那就是对象 "),t("strong",[e._v("（JS万物皆对象）")]),e._v(" 这种数据结构了，那么这期我们就再来介绍几个对象身上的API方法吧。")]),e._v(" "),t("h1",{attrs:{id:"_2-object-entries"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-object-entries"}},[e._v("#")]),e._v(" 2. Object.entries()")]),e._v(" "),t("p",[t("code",[e._v("Object.entries()")]),e._v("方法返回一个给定对象自身可枚举属性(不是原型上的属性)的键值对数\n组,"),t("code",[e._v("Object.entries()")]),e._v("返回一个"),t("code",[e._v("数组")]),e._v("，其元素是与直接在"),t("code",[e._v("object")]),e._v("上找到的"),t("code",[e._v("可枚举属性键值对相对应的数组")]),e._v("。属性的顺序与通过手动循环对象的属性值所给出的顺序相同。")]),e._v(" "),t("p",[e._v("简化版："),t("code",[e._v("Object.entries()")]),e._v("方法返回一个每个键值对在一个数组里的二维数组，且不会返回原型上的方法。")]),e._v(" "),t("p",[e._v("实现：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("Object.prototype.like = 'running'\nconst obj = new Object({\n    name: '123',\n    age: 12,\n    sex: '1'\n  })\nObject.prototype.my_entries = function(obj) {\n  const res = []\n  for (let key in obj) {\n    obj.hasOwnProperty(key) && res.push([key, obj[key]])\n  }\n  return res\n}\nconst newObj = Object.my_entries(obj)\nconsole.log(newObj); // [ [ 'name', '123' ], [ 'age', 12 ], [ 'sex', '1' ] ]\n")])])]),t("h2",{attrs:{id:"_3-object-fromentries"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-object-fromentries"}},[e._v("#")]),e._v(" 3. Object.fromEntries()")]),e._v(" "),t("p",[t("code",[e._v("Object.fromEntries()")]),e._v("方法是把键值对列表转换为一个对象，与"),t("code",[e._v("Object.entries()")]),e._v("相对。"),t("code",[e._v("Object.fromEntries()")]),e._v(" 方法s是把键值对列表转换为一个对象。我们可以使用它将"),t("strong",[e._v("map或者数组")]),e._v("等其他类型转为对象类型。")]),e._v(" "),t("p",[e._v("实现：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("const obj = [ [ 'name', '112' ], [ 'age', 18 ], [ 'sex', '123' ] ]\nconst map = new Map(obj)\nObject.prototype.my_fromEntries = function(arr) {\n  const ss = {}\n  for (let [key, value] of arr) {\n    ss[key] = value\n  }\n  return ss\n}\n\nconst newObj = Object.my_fromEntries(obj)  // { name: '112', age: 18, sex: '123' }\nconst newObj1 = Object.my_fromEntries(map) // { name: '112', age: 18, sex: '123' }\nconsole.log(newObj); \n\nconsole.log(newObj1);\n")])])]),t("h2",{attrs:{id:"_4-object-keys"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_4-object-keys"}},[e._v("#")]),e._v(" 4. Object.keys()")]),e._v(" "),t("p",[t("code",[e._v("Object.keys()")]),e._v("方法为遍历对象上的可枚举自身的属性，返回一个表示给定对象的所有可枚举属性的字符串数组。")]),e._v(" "),t("p",[e._v("简化版：遍历对象上所有的键，但不包含原型上的键, 并返回一个由键组成的字符串数组。")]),e._v(" "),t("p",[e._v("实现：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("Object.prototype.like = 'running'\nconst obj = new Object({\n  name: '123',\n  age: 18,\n  sex: '1'\n})\nObject.prototype.my_keys = function (obj) {\n  let res = [];\n  for (let key in obj) {\n  // hasOwnProperty()方法:某个属性是否是自己直接拥有的属性，而不是从原型链上继承的\n    if (obj.hasOwnProperty(key)) {  \n      res.push(key);\n    }\n  }\n  return res\n};\nconst keys = Object.my_keys(obj)\nconsole.log(keys); // [ 'name', 'age', 'sex' ]\n")])])]),t("h2",{attrs:{id:"_5-object-values"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_5-object-values"}},[e._v("#")]),e._v(" 5. Object.values()")]),e._v(" "),t("p",[e._v("我们既然知道了"),t("code",[e._v("Object.keys()")]),e._v("方法的作用，那自然可以得知"),t("code",[e._v("Object.values()")]),e._v("方法就是遍历对象上的可枚举自身的属性的值，同样返回的是一个由所有可枚举属性的值组成的一个数组。")]),e._v(" "),t("p",[e._v("实现：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("Object.prototype.like = 'running'\nconst obj = new Object({\n  name: '123',\n  age: 18,\n  sex: '1'\n})\nObject.prototype.my_values = function (obj) {\n  let res = [];\n  for (let key in obj) {\n    if (obj.hasOwnProperty(key)) {\n      res.push(obj[key]);\n    }\n  }\n  return res\n};\nconst values = Object.values(obj)\nconsole.log(values); // [ '123', 18, '1' ]\n")])])]),t("h1",{attrs:{id:"_5-object-is"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_5-object-is"}},[e._v("#")]),e._v(" 5. Object.is()")]),e._v(" "),t("p",[t("code",[e._v("Object.is()")]),e._v("方法判断两个值是否是相同的值。我们知道在JS中万物皆对象, 所以在使用"),t("code",[e._v("Object.is()")]),e._v("方法时，我们要注意几点：")]),e._v(" "),t("ul",[t("li",[e._v("两个值都是 undefined")]),e._v(" "),t("li",[e._v("两个值都是 null")]),e._v(" "),t("li",[e._v("两个值都是 true 或者都是 false")]),e._v(" "),t("li",[e._v("两个值是由相同个数的字符按照相同的顺序组成的字符串")]),e._v(" "),t("li",[e._v("两个值指向同一个对象")]),e._v(" "),t("li",[e._v("两个值都是数字并且\n"),t("ul",[t("li",[e._v("都是正零 +0")]),e._v(" "),t("li",[e._v("都是负零 -0")]),e._v(" "),t("li",[e._v("都是NaN")]),e._v(" "),t("li",[e._v("都是除零和 NaN 外的其它同一个数字")])])])]),e._v(" "),t("p",[e._v("这些情况，"),t("code",[e._v("Object.is()")]),e._v("返回的都是"),t("code",[e._v("true")]),e._v("。所以在我们实现"),t("code",[e._v("Object.is()")]),e._v("方法时，我们需要考虑如果接收的参数不是对象的情况。")]),e._v(" "),t("p",[e._v("实现；")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("Object.prototype.like = 'running'\nconst obj1 = new Object({\n  name: '111',\n  age: 18,\n  sex: '1'\n})\nconst obj2 = new Object({\n  name: '1',\n  age: 19,\n  sex: '3'\n})\nconst obj3 = obj1\nObject.prototype.my_is = function(x, y) {\n  if (x === y) {\n    return x !== 0 || 1 / x === 1 / y\n  }\n  return x !== x && y !== y\n}\nconst res = Object.my_is(obj1, obj2)\nconst res1 = Object.my_is(obj1, obj3)\nconst res2 = Object.my_is(NaN, NaN)\nconst res3 = Object.my_is(undefined, undefined)\nconst res4 = Object.my_is(null, null)\nconst res5 = Object.my_is(true, true)\nconst res6 = Object.my_is('1', '1')\nconst res7 = Object.my_is(+0, +0)\nconst res8 = Object.my_is(-0, +0)\nconst res9 = Object.my_is(0, 0)\nconsole.log(res); // false\nconsole.log(res1); // true\nconsole.log(res2); // true\nconsole.log(res3); // true\nconsole.log(res4); // true\nconsole.log(res5); // true\nconsole.log(res6); // true\nconsole.log(res7); // true\nconsole.log(res8); // false\nconsole.log(res9); // false\n")])])]),t("h1",{attrs:{id:"_6-object-assign"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_6-object-assign"}},[e._v("#")]),e._v(" 6. Object.assign()")]),e._v(" "),t("p",[t("strong",[t("code",[e._v("Object.assign()")]),e._v(" 方法用于将所有可枚举属性的值从一个或多个源对象复制到目标对象。它将返回目标对象。")]),e._v(" 简单来说，"),t("code",[e._v("Object.assign()")]),e._v("方法用来复制对象的可枚举属性到目标对象，利用这个特性我们可以实现对象属性的合并。")]),e._v(" "),t("p",[t("code",[e._v("Object.assign()")]),e._v("方接收多个参数，第一个参数成为目标对象，后面所有的参数都为源对象，它把源对象的可枚举属性复制到目标对象。")]),e._v(" "),t("p",[e._v("实现：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("Object.prototype.like = 'running'\nlet obj1 = new Object({\n    name: '123',\n    age: 18,\n    sex: '1',\n    a: 111\n})\nlet obj2 = new Object({\n    name: '121',\n    age: 19,\n    sex: '2'\n})\nObject.prototype.my_assign = function (...args) {\n    let obj = args[0]\n    for (let i = 0; i < args.length; i++) {\n        for (let key in args[i]) {\n            if (args[i].hasOwnProperty(key)) {\n                obj[key] = args[i][key]\n            }\n        }\n    }\n    return obj\n}\nlet obj3 = Object.my_assign(obj1, obj2) \nconsole.log(obj3); // { name: '121', age: 19, sex: '2', a: 111 }\nconsole.log(obj3===obj1); // true\n")])])]),t("h1",{attrs:{id:"结语"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#结语"}},[e._v("#")]),e._v(" 结语")]),e._v(" "),t("p",[e._v("当我们想要实现一个方法时，我们首先要考虑的问题就是，它接受几个参数，它实现了什么功能，同时我们不能忽略一些特殊情况的判断。学习阶段，欢迎指教。")])])}),[],!1,null,null,null);n.default=o.exports}}]);