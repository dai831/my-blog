(window.webpackJsonp=window.webpackJsonp||[]).push([[32],{745:function(n,e,t){"use strict";t.r(e);var l=t(4),s=Object(l.a)({},(function(){var n=this,e=n.$createElement,t=n._self._c||e;return t("ContentSlotsDistributor",{attrs:{"slot-key":n.$parent.slotKey}},[t("h1",{attrs:{id:"_1、-前言"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1、-前言"}},[n._v("#")]),n._v(" 1、 前言")]),n._v(" "),t("p",[n._v("在面试过程中，当面试官问你JS的设计模式的时候，那他大概率会问你最常见、最有名的模式，那就是"),t("strong",[n._v("发布-订阅")]),n._v("模式了。"),t("strong",[n._v("发布-订阅模式")]),n._v(" （Publish-Subscribe Pattern, pub-sub）又叫 "),t("strong",[n._v("观察者模式")]),n._v("（Observer Pattern），它定义了一种一对多的关系，让多个订阅者对象同时监听一个发布者，或者叫主题对象，这个主题对象的状态发生变化时就会通知所有订阅自己的订阅者对象，使得它们能够自动更新自己。")]),n._v(" "),t("h1",{attrs:{id:"_2、-发布-订阅模式"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2、-发布-订阅模式"}},[n._v("#")]),n._v(" 2、 发布—订阅模式")]),n._v(" "),t("p",[n._v("经过官方的一通解释，可能很多小伙伴还是不明白，什么是发布订阅模式。那这里我就来举一个发布订阅模式的例子吧。")]),n._v(" "),t("p",[n._v("在我们写vue项目的时候，当我们写到子父组件传值的时候，我们有一种解决办法是，在子组件上用绑定 "),t("strong",[n._v("this.$emit('自定义事件名',要传送的数据)")]),n._v(" 事件。 然后在父组件上用 "),t("strong",[n._v("this. on('事 件 名',call b ack)")]),n._v(" callback回调"),t("code",[n._v("emit")]),n._v("要传送的数据。 这就是一个很经典的发布订阅的例子。我只有在子组件使用"),t("code",[n._v("emit")]),n._v(" 发布了一个事件，我们才可以在父组件上用"),t("code",[n._v("on")]),n._v("监听的子组件发布事件。而且我们可以利用"),t("code",[n._v("on")]),n._v("和"),t("code",[n._v("emit")]),n._v("实现事件的多重绑定。")]),n._v(" "),t("h2",{attrs:{id:"_2-1-具体实现"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-1-具体实现"}},[n._v("#")]),n._v(" 2.1 具体实现")]),n._v(" "),t("p",[n._v("那现在就有小伙伴问了，那发布订阅该怎么实现呢？ 那下面我就来实现一个发布订阅模式吧。")]),n._v(" "),t("p",[n._v("首先我们要搞明白，写发布订阅模式的几个重要的点：")]),n._v(" "),t("ul",[t("li",[n._v("发布者和订阅者应该要在同一个实例对象上。")]),n._v(" "),t("li",[n._v("订阅在前， 发布在后")]),n._v(" "),t("li",[n._v("发布者，当消息发生时负责通知对应订阅者")]),n._v(" "),t("li",[n._v("订阅者，当消息发生时被通知的对象")]),n._v(" "),t("li",[n._v("emit 函数，用于发布者发布事件")]),n._v(" "),t("li",[n._v("on 函数， 用于订阅者接收函数")]),n._v(" "),t("li",[n._v("off 函数， 用于订阅者取消订阅")]),n._v(" "),t("li",[n._v("once 函数，用于订阅者只接收到一次发布事件")])]),n._v(" "),t("p",[n._v("具体实现：")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("class EventEmitter {\n    constructor() {\n      this.cache = { // 存放订阅事件未执行函数的容器\n      }\n    }\n    on(name, fn) { // 订阅事件\n      if (this.cache[name]) { // 多次订阅\n        this.cache[name].push(fn)\n      } else {\n        this.cache[name] = [fn]\n      }\n    }\n    emit(type) { // 发布事件\n      if (this.cache[type]) {\n        this.cache[type].forEach(item => \n          if (this.cache[type]) {\n            item()\n          }\n        });\n      } else {\n        this.cache[type] = []\n      }\n    }\n    once(name, fn) { // 一次订阅事件\n      const foo = () => {\n        fn()\n        delete this.cache[name]\n      }\n      this.on(name, foo)\n    }\n    off (name, fn) { // 取消订阅事件\n      const tasks = this.cache[name]\n      if (tasks) {\n        const index = tasks.findIndex(item => item === fn)\n        if (index >= 0) {\n          this.cache[name].splice(index, 1)\n        }\n      }\n    }\n  }\n")])])]),t("p",[n._v("这样我们就写完了一个发布订阅的模式。那我们就来测试测试。")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("// 公共部分\nlet ev = new EventEmitter()\nlet fn = () => {\n    console.log('hello 1');\n}\n   //1. 当未用emit发布事件时， fn函数未执行\n  ev.on('hello', fn) //无打印\n  // ev.emit('hello')\n  \n  // 2. 用emit发布事件后\n  ev.on('hello', fn) // hello 1\n  ev.emit('hello')\n \n  // 3. 有多个订阅\n  ev.on('hello', () => {\n    console.log('hello 1'); // hello 1\n  })\n  ev.on('hello', () => {\n    console.log('hello 2'); // hello 2\n  })\n  ev.emit('hello')\n  \n  // 4.取消订阅\n   ev.on('hello', fn) // 无打印\n   ev.off('hello', fn)\n   ev.on('hello', fn) // hello 1\n   ev.emit('hello')\n  \n  // 5. 订阅一次\n  ev.once('hello', fn)  // hello 1\n  ev.on('hello', fn) // 无打印\n  ev.emit('hello')\n")])])]),t("p",[n._v("写到这里，我们的发布订阅模式就完成了。")]),n._v(" "),t("h1",{attrs:{id:"结语"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#结语"}},[n._v("#")]),n._v(" 结语")]),n._v(" "),t("p",[n._v("发布订阅模式的实际应用场景还是很多的，掌握这种模式，可以帮我提高我们代码的思想和质量。所以小伙伴们还是需要掌握的哦。")])])}),[],!1,null,null,null);e.default=s.exports}}]);